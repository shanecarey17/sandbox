{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xB2e179603C317C175669c2EbfB881EBA47f0dB00",
    "contractAddress": "0xAA849ce1b497a2Bec9a39393bC56ADf41Ff7A0ff",
    "transactionIndex": 121,
    "gasUsed": "1780323",
    "logsBloom": "0x
    "blockHash": "0x92ef9916dd6858b66edb878b74e2ff9d3c520aa58613109c61700ff13e8d6c90",
    "transactionHash": "0xd9c0a1992314a89151c6a626b937e6aaa5f634089d4ceb9eb7ad153ff357f38f",
    "logs": [],
    "blockNumber": 10751446,
    "cumulativeGasUsed": "11996610",
    "status": 1,
    "byzantium": true
  },
  "address": "0xAA849ce1b497a2Bec9a39393bC56ADf41Ff7A0ff",
  "args": [],
  "solcInputHash": "0xe6cb79016b30cc0a2b84b62399252e0b2ed282b64c6e6876bc9dea3cb29f6ccd",
  "metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CompoundLiquidator.sol\":\"CompoundLiquidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CompoundLiquidator.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapV2Callee.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./MyERC20.sol\\\";\\nimport \\\"./WETH9.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ncontract CompoundLiquidator is IUniswapV2Callee {\\n    address constant public WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address constant public CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    address constant public UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n\\n    address public owner;\\n\\n    struct Data {\\n        address cTokenBorrowed;\\n        address cTokenCollateral;\\n        address borrowAccount;\\n        uint repayBorrowAmount;\\n        address uniswapPair;\\n        uint swapCollateralAmount;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    // Required to receive ether\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    function liquidate(\\n        address borrowAccount,\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayBorrowAmount\\n    ) external returns (uint) {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        require(cTokenBorrowed != cTokenCollateral, \\\"cTokenBorrowed and cTokenCollateral are the same\\\");\\n        require(ICToken(cTokenBorrowed).comptroller() == ICToken(cTokenCollateral).comptroller(), \\\"cTokens have different comptrollers\\\");\\n        require(repayBorrowAmount > 0, \\\"zero repayBorrowAmount\\\");\\n\\n        (address borrowedToken, address collateralToken) = getUnderlyings(cTokenBorrowed, cTokenCollateral);\\n        address uniswapPair = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS).getPair(borrowedToken, collateralToken);\\n        require(uniswapPair != address(0), \\\"uniswap pair doesn't exist\\\");\\n\\n        uint pairBorrowedAvailable = MyERC20(borrowedToken).balanceOf(uniswapPair);\\n        if (pairBorrowedAvailable < repayBorrowAmount) {\\n            repayBorrowAmount = pairBorrowedAvailable;\\n        }\\n\\n        (uint amount0Out, uint amount1Out, uint swapCollateralAmount) = getAmounts(uniswapPair, borrowedToken, repayBorrowAmount);\\n\\n        Data memory data = Data({\\n            cTokenBorrowed: cTokenBorrowed,\\n            cTokenCollateral: cTokenCollateral,\\n            borrowAccount: borrowAccount,\\n            repayBorrowAmount: repayBorrowAmount,\\n            uniswapPair: uniswapPair,\\n            swapCollateralAmount: swapCollateralAmount\\n        });\\n\\n        uint startBalance = MyERC20(collateralToken).balanceOf(address(this));\\n\\n        // 1. Initiate flash loan (either amount0Out or amount1Out will be zero)\\n        IUniswapV2Pair(uniswapPair).swap(amount0Out, amount1Out, address(this), abi.encode(data));\\n        uint endBalance = MyERC20(collateralToken).balanceOf(address(this));\\n\\n        if (endBalance < startBalance) {\\n            require(false, \\\"end balance less than start balance\\\");\\n        }\\n    }\\n\\n    function getUnderlyings(address cTokenBorrowed, address cTokenCollateral) internal \\n    returns (address borrowedToken, address collateralToken) {\\n        // cEther has no underlying() method smh, have to use WETH with uniswap\\n        if (cTokenBorrowed == CETH_ADDRESS) {\\n            borrowedToken = WETH_ADDRESS;\\n        } else {\\n            borrowedToken = ICToken(cTokenBorrowed).underlying();\\n        }\\n\\n        if (cTokenCollateral == CETH_ADDRESS) {\\n            collateralToken = WETH_ADDRESS;\\n        } else {\\n            collateralToken = ICToken(cTokenCollateral).underlying();\\n        }\\n    }\\n\\n    function getAmounts(address uniswapPair, address tokenOut, uint amountOut) internal \\n    returns (uint amount0Out, uint amount1Out, uint amountIn) {\\n        address pairToken0 = IUniswapV2Pair(uniswapPair).token0();\\n        address pairToken1 = IUniswapV2Pair(uniswapPair).token1();\\n        // amount out\\n        amount0Out = tokenOut == pairToken0 ? amountOut : 0;\\n        amount1Out = tokenOut == pairToken1 ? amountOut : 0;\\n        // amount in\\n        (uint reserve0, uint reserve1, uint blockTs) = IUniswapV2Pair(uniswapPair).getReserves();\\n        uint reserveOut = tokenOut == pairToken0 ? reserve0 : reserve1;\\n        uint reserveIn = tokenOut == pairToken0 ? reserve1 : reserve0;\\n        amountIn = getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    // Stolen from uniswap v2 library\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        uint numerator = reserveIn * amountOut * 1000;\\n        uint denominator = (reserveOut - amountOut) * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    function uniswapV2Call(\\n        address sender, \\n        uint amount0, \\n        uint amount1, \\n        bytes memory _data\\n    ) public override {\\n        Data memory data = abi.decode(_data, (Data));\\n        require(address(this) == sender, \\\"sender needs to be liquidator\\\");\\n\\n        // 2. Repay borrowed loan and receive collateral\\n        if (data.cTokenBorrowed == CETH_ADDRESS) {\\n            // We got WETH from uniswap, unwrap to ETH\\n            WETH9(WETH_ADDRESS).withdraw(data.repayBorrowAmount);\\n\\n            // Do the liquidate, value() specifies the repay amount in ETH\\n            ICEther(data.cTokenBorrowed).liquidateBorrow.value(data.repayBorrowAmount)(data.borrowAccount, data.cTokenCollateral);\\n        } else {\\n            require(MyERC20(ICToken(data.cTokenBorrowed).underlying()).balanceOf(address(this)) >= data.repayBorrowAmount, \\\"bad swap\\\");\\n            // Easy we already have the balance\\n            MyERC20(ICToken(data.cTokenBorrowed).underlying()).approve(data.cTokenBorrowed, data.repayBorrowAmount);\\n\\n            uint res = ICERC20(data.cTokenBorrowed).liquidateBorrow(data.borrowAccount, data.repayBorrowAmount, data.cTokenCollateral);\\n\\n            require(res == 0, Utils.concat('liquidate fail erc20 - errc ', Utils.uint2str(res)));\\n        }\\n\\n        // 3. Redeem collateral cToken for collateral\\n        uint collateralTokens = ICToken(data.cTokenCollateral).balanceOf(address(this));\\n\\n        uint res = ICToken(data.cTokenCollateral).redeem(collateralTokens);\\n        require(res == 0, Utils.concat('reedem fail - errc ', Utils.uint2str(res)));\\n\\n        address collateralTokenUnderlying;\\n        if (data.cTokenCollateral == CETH_ADDRESS) {\\n            // Uniswap needs us to have a balance of WETH to trade out\\n            // We can just swap our whole balance to WETH here, since we withdraw by ERC20 in other cases\\n            WETH9(WETH_ADDRESS).deposit.value(Utils.getBalance(address(this)))();\\n            collateralTokenUnderlying = WETH_ADDRESS;\\n        } else {\\n            collateralTokenUnderlying = ICToken(data.cTokenCollateral).underlying();\\n        }\\n\\n        // 4. Now the flash loan can go through because we have a balance of collateral token to swap for our borrowed tokens\\n        MyERC20(collateralTokenUnderlying).transfer(data.uniswapPair, data.swapCollateralAmount);\\n    }\\n\\n    function withdraw(address token) external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n\\n        uint balance = MyERC20(token).balanceOf(address(this));\\n\\n        MyERC20(token).transfer(msg.sender, balance);\\n    }\\n\\n    function withdrawEth() external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n\\n        msg.sender.send(Utils.getBalance(address(this)));\\n    }\\n\\n    function enterMarkets(address comptroller, address[] calldata cTokens) external returns (uint[] memory) {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        return IComptroller(comptroller).enterMarkets(cTokens);\\n    }\\n\\n    function exitMarket(address comptroller, address cToken) external returns (uint) {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        return IComptroller(comptroller).exitMarket(cToken);\\n    }\\n}\\n\",\"keccak256\":\"0xcd960bdd3ae87ab5f09d224f4a70dca0eb97651e91c50a98a82e3b40ab6eb10f\"},\"contracts/ICToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ICToken {\\n    // Constants\\n    function comptroller() external returns (address);\\n    function underlying() external returns (address); // TODO remove\\n\\n    // ERC 20\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n\\n    // Compound\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function borrowBalanceStored(address account) external view returns (uint);\\n}\\n\\ninterface ICEther {    \\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\\n\\n    function mint() external payable;\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\\n    function balanceOf(address) external view returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n}\\n\\ninterface ICERC20 {\\n    function underlying() external view returns (address);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\\n\\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\\n    function balanceOf(address) external view returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n}\\n\",\"keccak256\":\"0xe5c050e7d01a3fd409a20397eebd81c4c1ae9f8f92ab810e3d8ddd8fdc7b6260\"},\"contracts/IComptroller.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IComptroller {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    // bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n\\n    function closeFactorMantissa() external view returns (uint);\\n\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function markets(address cTokenAddress) external view returns (bool, uint);\\n\\n    // Impl\\n    function oracle() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint);\\n}\\n\",\"keccak256\":\"0x57a018ce82ac48fcded30248981099b1c5f67dd2019034b661346687f924a915\"},\"contracts/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x92a983a9b149d8f09720f4cfa5b22b394c7e4f8ca2faeb066d21f15f1829d24d\"},\"contracts/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\",\"keccak256\":\"0xd8f5ee294346a1f2a4773efd46417d02d96028ca3282a6b41ff4bc71b1fc7b8d\"},\"contracts/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0xab2d7424a47b2382cb70fad03d9f2446bf3e872941c6078653a2148c794675da\"},\"contracts/MyERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface MyERC20 {\\n    function totalSupply() external view returns (uint supply);\\n    function balanceOf(address _owner) external view returns (uint balance);\\n    function transfer(address _to, uint _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\\n    function approve(address _spender, uint _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\\n    function decimals() external view returns(uint digits);\\n    function symbol() external view returns (string memory symb);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\\n}\",\"keccak256\":\"0xd2b453adc3b7aa9d04cf6f8fddd8e57d54804fc97a00fd2a43f240f3db5ab9d4\"},\"contracts/Utils.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary Utils {\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function int2str(int i) internal pure returns (string memory) {\\n        if (i == 0) return \\\"0\\\";\\n        bool negative = i < 0;\\n        uint j = uint(negative ? -i : i);\\n        uint l = j;     // Keep an unsigned copy\\n        uint len;\\n        while (j != 0){\\n            len++;\\n            j /= 10;\\n        }\\n        if (negative) ++len;  // Make room for '-' sign\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (l != 0){\\n            bstr[k--] = byte(48 + uint8(l) % 10);\\n            l /= 10;\\n        }\\n        if (negative) {    // Prepend '-'\\n            bstr[0] = '-';\\n        }\\n        return string(bstr);\\n    }\\n\\n    function addr2str(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\\n            byte hi = byte(uint8(b) / 16);\\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    function char(byte b) internal pure returns (byte) {\\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getBalance(address addr) internal view returns (uint) {\\n        return addr.balance;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n      return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b));\\n    }\\n}\",\"keccak256\":\"0x3138e23c3e7ab0e47ad1fc58cae6fcf7dd90e1c9297713024f0d7a25cc2bfaf0\"},\"contracts/WETH9.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface WETH9 {\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n    event Deposit(address indexed dst, uint wad);\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external;\\n\\n    function balanceOf(address _owner) external view returns (uint balance);\\n}\",\"keccak256\":\"0x6a48526a86448f552afff418dc75e017949fb7d3235fed014f6fbb380c424b07\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055611ede806100326000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461014b5780639bf710d414610160578063a0ef91df14610175578063aab3f8681461018a578063f53cc4b3146101b75761009c565b8063040141e51461009e57806310d1e85c146100c95780634883400d146100e95780634ab45d331461011657806351cff8d91461012b5761009c565b3661009c57005b005b3480156100aa57600080fd5b506100b36101d7565b6040516100c09190611aa1565b60405180910390f35b3480156100d557600080fd5b5061009c6100e43660046117f3565b6101ef565b3480156100f557600080fd5b50610109610104366004611773565b61097d565b6040516100c09190611b58565b34801561012257600080fd5b506100b3610a36565b34801561013757600080fd5b5061009c6101463660046116b3565b610a4e565b34801561015757600080fd5b506100b3610b7f565b34801561016c57600080fd5b506100b3610b8e565b34801561018157600080fd5b5061009c610ba6565b34801561019657600080fd5b506101aa6101a5366004611723565b610bf6565b6040516100c09190611db8565b3480156101c357600080fd5b506101aa6101d23660046116eb565b611102565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6101f761167e565b8180602001905161020b919081019061195d565b9050306001600160a01b0386161461023e5760405162461bcd60e51b815260040161023590611cb4565b60405180910390fd5b80516001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed51415610347576060810151604051632e1a7d4d60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291632e1a7d4d9161029f9190600401611db8565b600060405180830381600087803b1580156102b957600080fd5b505af11580156102cd573d6000803e3d6000fd5b5050505080600001516001600160a01b031663aae40a2a8260600151836040015184602001516040518463ffffffff1660e01b8152600401610310929190611ace565b6000604051808303818588803b15801561032957600080fd5b505af115801561033d573d6000803e3d6000fd5b505050505061065d565b806060015181600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561038b57600080fd5b505af115801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103c391908101906116cf565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103ee9190611aa1565b60206040518083038186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061043e9190810190611a2f565b101561045c5760405162461bcd60e51b815260040161023590611ceb565b80600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104d391908101906116cf565b8151606083015160405163095ea7b360e01b81526001600160a01b03939093169263095ea7b392610508929091600401611ab5565b602060405180830381600087803b15801561052257600080fd5b505af1158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061055a919081019061193d565b50600081600001516001600160a01b031663f5e3c4628360400151846060015185602001516040518463ffffffff1660e01b815260040161059d93929190611ae8565b602060405180830381600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105ef9190810190611a2f565b90508060001461063c6040518060400160405280601c81526020017f6c6971756964617465206661696c206572633230202d20657272632000000000815250610637846111b2565b611275565b9061065a5760405162461bcd60e51b81526004016102359190611b9b565b50505b60208101516040516370a0823160e01b81526000916001600160a01b0316906370a0823190610690903090600401611aa1565b60206040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106e09190810190611a2f565b9050600082602001516001600160a01b031663db006a75836040518263ffffffff1660e01b81526004016107149190611db8565b602060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107669190810190611a2f565b9050806000146107a46040518060400160405280601381526020017203932b2b232b6903330b4b610169032b939319606d1b815250610637846111b2565b906107c25760405162461bcd60e51b81526004016102359190611b9b565b5060208301516000906001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156108725773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc263d0e30db0610812306112a1565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290506108ec565b83602001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108b157600080fd5b505af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108e991908101906116cf565b90505b608084015160a085015160405163a9059cbb60e01b81526001600160a01b0384169263a9059cbb9261092092600401611ab5565b602060405180830381600087803b15801561093a57600080fd5b505af115801561094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610972919081019061193d565b505050505050505050565b6000546060906001600160a01b031633146109aa5760405162461bcd60e51b815260040161023590611d44565b604051631853304760e31b81526001600160a01b0385169063c2998238906109d89086908690600401611b0b565b600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2e91908101906118a5565b949350505050565b734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b6000546001600160a01b03163314610a785760405162461bcd60e51b815260040161023590611d44565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610aa7903090600401611aa1565b60206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610af79190810190611a2f565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb90610b289033908590600401611ab5565b602060405180830381600087803b158015610b4257600080fd5b505af1158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b7a919081019061193d565b505050565b6000546001600160a01b031681565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b6000546001600160a01b03163314610bd05760405162461bcd60e51b815260040161023590611d44565b336108fc610bdd306112a1565b6040518115909202916000818181858888f15050505050565b600080546001600160a01b03163314610c215760405162461bcd60e51b815260040161023590611d44565b826001600160a01b0316846001600160a01b03161415610c535760405162461bcd60e51b815260040161023590611bf1565b826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cc691908101906116cf565b6001600160a01b0316846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d0a57600080fd5b505af1158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4291908101906116cf565b6001600160a01b031614610d685760405162461bcd60e51b815260040161023590611bae565b60008211610d885760405162461bcd60e51b815260040161023590611c41565b600080610d9586866112ae565b60405163e6a4390560e01b81529193509150600090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590610dd69086908690600401611ace565b60206040518083038186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e2691908101906116cf565b90506001600160a01b038116610e4e5760405162461bcd60e51b815260040161023590611d0d565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610e7d908590600401611aa1565b60206040518083038186803b158015610e9557600080fd5b505afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ecd9190810190611a2f565b905085811015610edb578095505b6000806000610eeb85888b611425565b925092509250610ef961167e565b6040518060c001604052808d6001600160a01b031681526020018c6001600160a01b031681526020018e6001600160a01b031681526020018b8152602001876001600160a01b031681526020018381525090506000876001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f7a9190611aa1565b60206040518083038186803b158015610f9257600080fd5b505afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fca9190810190611a2f565b9050866001600160a01b031663022c0d9f86863086604051602001610fef9190611d67565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161101d9493929190611dc1565b600060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038b1691506370a082319061107e903090600401611aa1565b60206040518083038186803b15801561109657600080fd5b505afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ce9190810190611a2f565b9050818110156110f05760405162461bcd60e51b815260040161023590611c71565b50505050505050505050949350505050565b600080546001600160a01b0316331461112d5760405162461bcd60e51b815260040161023590611d44565b604051630ede4edd60e41b81526001600160a01b0384169063ede4edd090611159908590600401611aa1565b602060405180830381600087803b15801561117357600080fd5b505af1158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ab9190810190611a2f565b9392505050565b6060816111d757506040805180820190915260018152600360fc1b6020820152611270565b8160005b81156111ef57600101600a820491506111db565b6060816040519080825280601f01601f19166020018201604052801561121c576020820181803883390190505b50905060001982015b851561126a57600a860660300160f81b8282806001900393508151811061124857fe5b60200101906001600160f81b031916908160001a905350600a86049550611225565b50925050505b919050565b6060828260405160200161128a929190611a73565b604051602081830303815290604052905092915050565b6001600160a01b03163190565b6000806001600160a01b038416734ddc2d193948926d02f9b1fe9e1daa0718270ed514156112f25773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29150611368565b836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061136591908101906116cf565b91505b6001600160a01b038316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156113a8575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261141e565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113e357600080fd5b505af11580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061141b91908101906116cf565b90505b9250929050565b600080600080866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561146457600080fd5b505afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061149c91908101906116cf565b90506000876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061151191908101906116cf565b9050816001600160a01b0316876001600160a01b031614611533576000611535565b855b9450806001600160a01b0316876001600160a01b031614611557576000611559565b855b935060008060008a6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561159957600080fd5b505afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d191908101906119db565b63ffffffff1692506001600160701b031692506001600160701b031692506000856001600160a01b03168b6001600160a01b0316146116105782611612565b835b90506000866001600160a01b03168c6001600160a01b0316146116355784611637565b835b90506116448b8284611656565b97505050505050505093509350939050565b60006103e8838502026103e58584030280828161166f57fe5b04600101925050509392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6000602082840312156116c4578081fd5b81356111ab81611e7b565b6000602082840312156116e0578081fd5b81516111ab81611e7b565b600080604083850312156116fd578081fd5b823561170881611e7b565b9150602083013561171881611e7b565b809150509250929050565b60008060008060808587031215611738578182fd5b843561174381611e7b565b9350602085013561175381611e7b565b9250604085013561176381611e7b565b9396929550929360600135925050565b600080600060408486031215611787578283fd5b833561179281611e7b565b9250602084013567ffffffffffffffff808211156117ae578384fd5b81860187601f8201126117bf578485fd5b80359250818311156117cf578485fd5b87602080850283010111156117e2578485fd5b949760209095019650909450505050565b60008060008060808587031215611808578384fd5b843561181381611e7b565b93506020850135925060408501359150606085013567ffffffffffffffff8082111561183d578283fd5b81870188601f82011261184e578384fd5b803592508183111561185e578384fd5b611871601f8401601f1916602001611df8565b9150828252886020848301011115611887578384fd5b611898836020840160208401611e3f565b5094979396509194505050565b600060208083850312156118b7578182fd5b825167ffffffffffffffff8111156118cd578283fd5b80840185601f8201126118de578384fd5b805191506118f36118ee83611e1f565b611df8565b828152838101908285018585028401860189101561190f578687fd5b8693505b84841015611931578051835260019390930192918501918501611913565b50979650505050505050565b60006020828403121561194e578081fd5b815180151581146111ab578182fd5b600060c0828403121561196e578081fd5b61197860c0611df8565b825161198381611e7b565b8152602083015161199381611e7b565b602082015260408301516119a681611e7b565b60408201526060838101519082015260808301516119c381611e7b565b608082015260a0928301519281019290925250919050565b6000806000606084860312156119ef578283fd5b83516119fa81611e93565b6020850151909350611a0b81611e93565b604085015190925063ffffffff81168114611a24578182fd5b809150509250925092565b600060208284031215611a40578081fd5b5051919050565b60008151808452611a5f816020860160208601611e4b565b601f01601f19169290920160200192915050565b60008351611a85818460208801611e4b565b8351908301611a98828260208801611e4b565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252810182905260008360408301825b85811015611b4e578235611b3181611e7b565b6001600160a01b0316825260209283019290910190600101611b1e565b5095945050505050565b602080825282518282018190526000918401906040840190835b81811015611b90578351835260209384019390920191600101611b72565b509095945050505050565b6000602082526111ab6020830184611a47565b60208082526023908201527f63546f6b656e73206861766520646966666572656e7420636f6d7074726f6c6c60408201526265727360e81b606082015260800190565b60208082526030908201527f63546f6b656e426f72726f77656420616e642063546f6b656e436f6c6c61746560408201526f72616c20617265207468652073616d6560801b606082015260800190565b6020808252601690820152751e995c9bc81c995c185e509bdc9c9bddd05b5bdd5b9d60521b604082015260600190565b60208082526023908201527f656e642062616c616e6365206c657373207468616e2073746172742062616c616040820152626e636560e81b606082015260800190565b6020808252601d908201527f73656e646572206e6565647320746f206265206c697175696461746f72000000604082015260600190565b602080825260089082015267062616420737761760c41b604082015260600190565b6020808252601a908201527f756e6973776170207061697220646f65736e2774206578697374000000000000604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519091169082015260a0918201519181019190915260c00190565b90815260200190565b600085825284602083015260018060a01b038416604083015260806060830152611dee6080830184611a47565b9695505050505050565b60405181810167ffffffffffffffff81118282101715611e1757600080fd5b604052919050565b600067ffffffffffffffff821115611e35578081fd5b5060209081020190565b82818337506000910152565b60005b83811015611e66578181015183820152602001611e4e565b83811115611e75576000848401525b50505050565b6001600160a01b0381168114611e9057600080fd5b50565b6001600160701b0381168114611e9057600080fdfea26469706673582212207794b9d4bef9ca858638bd86df86312fcb5f31b6718bb4a0f7b5a0242ffa625c64736f6c63430006000033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 279,
        "contract": "contracts/CompoundLiquidator.sol:CompoundLiquidator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1580400",
      "executionCost": "22487",
      "totalCost": "1602887"
    },
    "external": {
      "": "196",
      "CETH_ADDRESS()": "319",
      "UNISWAP_FACTORY_ADDRESS()": "274",
      "WETH_ADDRESS()": "253",
      "enterMarkets(address,address[])": "infinite",
      "exitMarket(address,address)": "infinite",
      "liquidate(address,address,address,uint256)": "infinite",
      "owner()": "1070",
      "uniswapV2Call(address,uint256,uint256,bytes)": "infinite",
      "withdraw(address)": "infinite",
      "withdrawEth()": "infinite"
    },
    "internal": {
      "getAmountIn(uint256,uint256,uint256)": "103",
      "getAmounts(address,address,uint256)": "infinite",
      "getUnderlyings(address,address)": "infinite"
    }
  }
}