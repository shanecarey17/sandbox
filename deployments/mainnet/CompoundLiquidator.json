{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "blacklistCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "whitelistCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xB2e179603C317C175669c2EbfB881EBA47f0dB00",
    "contractAddress": "0xB0983BE3bd4c4CDC264095754A338e223e5d42B8",
    "transactionIndex": 107,
    "gasUsed": "1945779",
    "logsBloom": "0x
    "blockHash": "0x2041facdfd7759cef104ceb4d185b09ecb5de56d3d6664b32ba1be815ea0a47e",
    "transactionHash": "0x36389bc77910bef31a38ff4cfeedb954e670e99a96bf83109cd673af5e3b33cb",
    "logs": [],
    "blockNumber": 10850955,
    "cumulativeGasUsed": "10054943",
    "status": 1,
    "byzantium": true
  },
  "address": "0xB0983BE3bd4c4CDC264095754A338e223e5d42B8",
  "args": [],
  "solcInputHash": "0x103b261fc33cdd3392535c7b4e9160f52bb2a2d3e5c498e61105e44222ca6c52",
  "metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"blacklistCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"whitelistCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CompoundLiquidator.sol\":\"CompoundLiquidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CompoundLiquidator.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapV2Callee.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./MyERC20.sol\\\";\\nimport \\\"./WETH9.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ncontract CompoundLiquidator is IUniswapV2Callee {\\n    address constant public UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address constant public CETH_ADDRESS            = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    address constant public WETH_ADDRESS            = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address constant public DAI_ADDRESS             = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    address public owner;\\n    mapping(address => bool) public callers;\\n\\n    struct Data {\\n        address cTokenBorrowed;\\n        address cTokenCollateral;\\n        address borrowAccount;\\n        uint repayBorrowAmount;\\n        address uniswapPair;\\n        uint swapCollateralAmount;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        callers[owner] = true;\\n    }\\n\\n    // Required to receive ether\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    function liquidate(\\n        address borrowAccount,\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayBorrowAmount\\n    ) external returns (uint) {\\n        require(callers[msg.sender], \\\"not caller\\\");\\n        require(ICToken(cTokenBorrowed).comptroller() == ICToken(cTokenCollateral).comptroller(), \\\"cTokens have different comptrollers\\\");\\n        require(repayBorrowAmount > 0, \\\"zero repayBorrowAmount\\\");\\n\\n        (address borrowedToken, address collateralToken) = getUnderlyings(cTokenBorrowed, cTokenCollateral);\\n\\n        address uniswapPair = getUniswapPair(borrowedToken, collateralToken);\\n\\n        (uint amount0Out, uint amount1Out, uint swapCollateralAmount) = getAmounts(uniswapPair, borrowedToken, repayBorrowAmount, collateralToken);\\n\\n        Data memory data = Data({\\n            cTokenBorrowed: cTokenBorrowed,\\n            cTokenCollateral: cTokenCollateral,\\n            borrowAccount: borrowAccount,\\n            repayBorrowAmount: repayBorrowAmount,\\n            uniswapPair: uniswapPair,\\n            swapCollateralAmount: swapCollateralAmount\\n        });\\n\\n        uint startBalance = MyERC20(collateralToken).balanceOf(address(this));\\n\\n        // 1. Initiate flash loan (either amount0Out or amount1Out will be zero)\\n        IUniswapV2Pair(uniswapPair).swap(amount0Out, amount1Out, address(this), abi.encode(data));\\n\\n        uint endBalance = MyERC20(collateralToken).balanceOf(address(this));\\n\\n        if (endBalance <= startBalance) {\\n            require(false, \\\"nope\\\");\\n        }\\n\\n        MyERC20(collateralToken).transfer(msg.sender, endBalance);\\n\\n        return endBalance - startBalance;\\n    }\\n\\n    function getUnderlyings(address cTokenBorrowed, address cTokenCollateral) internal \\n    returns (address borrowedToken, address collateralToken) {\\n        // cEther has no underlying() method smh, have to use WETH with uniswap\\n        if (cTokenBorrowed == CETH_ADDRESS) {\\n            borrowedToken = WETH_ADDRESS;\\n        } else {\\n            borrowedToken = ICToken(cTokenBorrowed).underlying();\\n        }\\n\\n        if (cTokenCollateral == CETH_ADDRESS) {\\n            collateralToken = WETH_ADDRESS;\\n        } else {\\n            collateralToken = ICToken(cTokenCollateral).underlying();\\n        }\\n    }\\n\\n    function getUniswapPair(address borrowedToken, address collateralToken) internal returns (address) {\\n        // If tokens are the same, use uniswap only for flash loan\\n        if (borrowedToken == collateralToken) {\\n            if (borrowedToken == WETH_ADDRESS) {\\n                collateralToken = DAI_ADDRESS;\\n            } else {\\n                collateralToken = WETH_ADDRESS;\\n            }\\n        }\\n\\n        address uniswapPair = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS).getPair(borrowedToken, collateralToken);\\n        require(uniswapPair != address(0), \\\"no pair\\\");\\n\\n        // ensure oustanding balances are accounted for\\n        IUniswapV2Pair(uniswapPair).sync();\\n\\n        return uniswapPair;\\n    }\\n\\n    function getAmounts(address uniswapPair, address tokenOut, uint amountOut, address tokenIn) internal \\n    returns (uint amount0Out, uint amount1Out, uint amountIn) {\\n        address pairToken0 = IUniswapV2Pair(uniswapPair).token0();\\n        address pairToken1 = IUniswapV2Pair(uniswapPair).token1();\\n\\n        // amount out\\n        amount0Out = tokenOut == pairToken0 ? amountOut : 0;\\n        amount1Out = tokenOut == pairToken1 ? amountOut : 0;\\n\\n        // amount in\\n\\t(uint reserve0, uint reserve1, uint blockTs) = IUniswapV2Pair(uniswapPair).getReserves();\\n\\n\\tuint reserveOut  = tokenOut == pairToken0 ? reserve0 : reserve1;\\n\\tuint reserveIn   = tokenOut == pairToken0 ? reserve1 : reserve0;\\n\\n        if (tokenOut == tokenIn) {\\n            amountIn         = (amountOut * 1000 / 997) + 1;\\n        } else {\\n\\t    uint numerator   = reserveIn * amountOut * 1000;\\n\\t    uint denominator = (reserveOut - amountOut) * 997;\\n\\t    amountIn         = (numerator / denominator) + 1;\\n        }\\n    }\\n\\n    function uniswapV2Call(\\n        address sender, \\n        uint amount0, \\n        uint amount1, \\n        bytes memory _data\\n    ) public override {\\n        require(address(this) == sender, \\\"sender needs to be liquidator\\\");\\n\\n        Data memory data = abi.decode(_data, (Data));\\n\\n        // 2. Repay borrowed loan and receive collateral\\n        if (data.cTokenBorrowed == CETH_ADDRESS) {\\n            // We got WETH from uniswap, unwrap to ETH\\n            WETH9(WETH_ADDRESS).withdraw(data.repayBorrowAmount);\\n\\n            // Do the liquidate, value() specifies the repay amount in ETH\\n            ICEther(data.cTokenBorrowed).liquidateBorrow.value(data.repayBorrowAmount)(data.borrowAccount, data.cTokenCollateral);\\n        } else {\\n            require(MyERC20(ICToken(data.cTokenBorrowed).underlying()).balanceOf(address(this)) >= data.repayBorrowAmount, \\\"bad swap\\\");\\n            // Easy we already have the balance\\n            address underlyingAddress = ICToken(data.cTokenBorrowed).underlying();\\n            // Need to approve 0 first for USDT bug\\n            MyERC20(underlyingAddress).approve(data.cTokenBorrowed, 0);\\n            MyERC20(underlyingAddress).approve(data.cTokenBorrowed, data.repayBorrowAmount);\\n\\n            uint res = ICERC20(data.cTokenBorrowed).liquidateBorrow(data.borrowAccount, data.repayBorrowAmount, data.cTokenCollateral);\\n\\n            require(res == 0, Utils.concat('liquidate fail erc20 - errc ', Utils.uint2str(res)));\\n        }\\n\\n        // 3. Redeem collateral cToken for collateral\\n        uint collateralTokens = ICToken(data.cTokenCollateral).balanceOf(address(this));\\n\\n        uint res = ICToken(data.cTokenCollateral).redeem(collateralTokens);\\n        require(res == 0, Utils.concat('reedem fail - errc ', Utils.uint2str(res)));\\n\\n        address collateralTokenUnderlying;\\n        if (data.cTokenCollateral == CETH_ADDRESS) {\\n            // Uniswap needs us to have a balance of WETH to trade out\\n            // We can just swap our whole balance to WETH here, since we withdraw by ERC20 in other cases\\n            WETH9(WETH_ADDRESS).deposit.value(Utils.getBalance(address(this)))();\\n            collateralTokenUnderlying = WETH_ADDRESS;\\n        } else {\\n            collateralTokenUnderlying = ICToken(data.cTokenCollateral).underlying();\\n        }\\n\\n        //require(false, Utils.uint2str(MyERC20(collateralTokenUnderlying).balanceOf(address(this))));\\n        //require(false, Utils.uint2str(data.swapCollateralAmount));\\n\\n        // 4. Now the flash loan can go through because we have a balance of collateral token to swap for our borrowed tokens\\n        bool success = MyERC20(collateralTokenUnderlying).transfer(data.uniswapPair, data.swapCollateralAmount);\\n        require(success, \\\"erc20 transfer failed\\\");\\n    }\\n\\n    function withdraw(address token) external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n\\n        uint balance = MyERC20(token).balanceOf(address(this));\\n\\n        MyERC20(token).transfer(msg.sender, balance);\\n    }\\n\\n    function withdrawEth() external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n\\n        msg.sender.transfer(Utils.getBalance(address(this)));\\n    }\\n\\n    function whitelistCaller(address _caller) external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        callers[_caller] = true;\\n    }\\n\\n    function blacklistCaller(address _caller) external {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        callers[_caller] = false;\\n    }\\n\\n    function enterMarkets(address comptroller, address[] calldata cTokens) external returns (uint[] memory) {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        return IComptroller(comptroller).enterMarkets(cTokens);\\n    }\\n\\n    function exitMarket(address comptroller, address cToken) external returns (uint) {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        return IComptroller(comptroller).exitMarket(cToken);\\n    }\\n}\\n\",\"keccak256\":\"0x3e91634526556e314b32a71484b77c727532fc4b0d3388c3300c131290d632b1\"},\"contracts/ICToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ICToken {\\n    // Constants\\n    function comptroller() external returns (address);\\n    function underlying() external returns (address); // TODO remove\\n\\n    // ERC 20\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n\\n    // Compound\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function borrowBalanceStored(address account) external view returns (uint);\\n}\\n\\ninterface ICEther {    \\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\\n\\n    function mint() external payable;\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\\n    function balanceOf(address) external view returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n}\\n\\ninterface ICERC20 {\\n    function underlying() external view returns (address);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\\n\\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\\n    function balanceOf(address) external view returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n}\\n\",\"keccak256\":\"0xe5c050e7d01a3fd409a20397eebd81c4c1ae9f8f92ab810e3d8ddd8fdc7b6260\"},\"contracts/IComptroller.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IComptroller {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    // bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n\\n    function closeFactorMantissa() external view returns (uint);\\n\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function markets(address cTokenAddress) external view returns (bool, uint);\\n\\n    // Impl\\n    function oracle() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint);\\n}\\n\",\"keccak256\":\"0x57a018ce82ac48fcded30248981099b1c5f67dd2019034b661346687f924a915\"},\"contracts/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x92a983a9b149d8f09720f4cfa5b22b394c7e4f8ca2faeb066d21f15f1829d24d\"},\"contracts/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\",\"keccak256\":\"0xd8f5ee294346a1f2a4773efd46417d02d96028ca3282a6b41ff4bc71b1fc7b8d\"},\"contracts/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0xab2d7424a47b2382cb70fad03d9f2446bf3e872941c6078653a2148c794675da\"},\"contracts/MyERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface MyERC20 {\\n    function totalSupply() external view returns (uint supply);\\n    function balanceOf(address _owner) external view returns (uint balance);\\n    function transfer(address _to, uint _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\\n    function approve(address _spender, uint _value) external;\\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\\n    function decimals() external view returns(uint digits);\\n    function symbol() external view returns (string memory symb);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\\n}\",\"keccak256\":\"0xa8459178c893d9e29155492f467708475979cd420755a2603f48b9c59c486a2f\"},\"contracts/Utils.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary Utils {\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function int2str(int i) internal pure returns (string memory) {\\n        if (i == 0) return \\\"0\\\";\\n        bool negative = i < 0;\\n        uint j = uint(negative ? -i : i);\\n        uint l = j;     // Keep an unsigned copy\\n        uint len;\\n        while (j != 0){\\n            len++;\\n            j /= 10;\\n        }\\n        if (negative) ++len;  // Make room for '-' sign\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (l != 0){\\n            bstr[k--] = byte(48 + uint8(l) % 10);\\n            l /= 10;\\n        }\\n        if (negative) {    // Prepend '-'\\n            bstr[0] = '-';\\n        }\\n        return string(bstr);\\n    }\\n\\n    function addr2str(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\\n            byte hi = byte(uint8(b) / 16);\\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    function char(byte b) internal pure returns (byte) {\\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\\n        else return byte(uint8(b) + 0x57);\\n    }\\n\\n    function getBalance(address addr) internal view returns (uint) {\\n        return addr.balance;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n      return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b));\\n    }\\n}\",\"keccak256\":\"0x3138e23c3e7ab0e47ad1fc58cae6fcf7dd90e1c9297713024f0d7a25cc2bfaf0\"},\"contracts/WETH9.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface WETH9 {\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n    event Deposit(address indexed dst, uint wad);\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external;\\n\\n    function balanceOf(address _owner) external view returns (uint balance);\\n}\",\"keccak256\":\"0x6a48526a86448f552afff418dc75e017949fb7d3235fed014f6fbb380c424b07\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633178082556001600160a01b03168152600160208190526040909120805460ff19169091179055612179806100556000396000f3fe6080604052600436106100e15760003560e01c806351cff8d91161007f5780639bf710d4116100595780639bf710d41461022e578063a0ef91df14610243578063aab3f86814610258578063f53cc4b314610285576100e8565b806351cff8d9146101cc5780637bbf4a3f146101ec5780638da5cb5b14610219576100e8565b806310d1e85c116100bb57806310d1e85c146101555780632a4c0a1a146101755780634883400d1461018a5780634ab45d33146101b7576100e8565b8063040141e5146100ea578063052d33841461011557806306bd1ba014610135576100e8565b366100e857005b005b3480156100f657600080fd5b506100ff6102a5565b60405161010c9190611d6c565b60405180910390f35b34801561012157600080fd5b506100e861013036600461197e565b6102bd565b34801561014157600080fd5b506100e861015036600461197e565b610317565b34801561016157600080fd5b506100e8610170366004611abe565b610362565b34801561018157600080fd5b506100ff610b4e565b34801561019657600080fd5b506101aa6101a5366004611a3e565b610b66565b60405161010c9190611e23565b3480156101c357600080fd5b506100ff610c1f565b3480156101d857600080fd5b506100e86101e736600461197e565b610c37565b3480156101f857600080fd5b5061020c61020736600461197e565b610d68565b60405161010c9190611e66565b34801561022557600080fd5b506100ff610d7d565b34801561023a57600080fd5b506100ff610d8c565b34801561024f57600080fd5b506100e8610da4565b34801561026457600080fd5b506102786102733660046119ee565b610e06565b60405161010c9190612056565b34801561029157600080fd5b506102786102a03660046119b6565b611230565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6000546001600160a01b031633146102f05760405162461bcd60e51b81526004016102e790611fe2565b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031633146103415760405162461bcd60e51b81526004016102e790611fe2565b6001600160a01b03166000908152600160205260409020805460ff19169055565b306001600160a01b0385161461038a5760405162461bcd60e51b81526004016102e790611f89565b610392611949565b818060200190516103a69190810190611c28565b80519091506001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156104b2576060810151604051632e1a7d4d60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291632e1a7d4d9161040a9190600401612056565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b5050505080600001516001600160a01b031663aae40a2a8260600151836040015184602001516040518463ffffffff1660e01b815260040161047b929190611d99565b6000604051808303818588803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050505061080a565b806060015181600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052e919081019061199a565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105599190611d6c565b60206040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a99190810190611cfa565b10156105c75760405162461bcd60e51b81526004016102e790611fc0565b600081600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561060857600080fd5b505af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610640919081019061199a565b825160405163095ea7b360e01b81529192506001600160a01b0383169163095ea7b39161067291600090600401611d80565b600060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b50508351606085015160405163095ea7b360e01b81526001600160a01b038616945063095ea7b393506106d7929190600401611d80565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b50508351604080860151606087015160208801519251637af1e23160e11b8152600096506001600160a01b03909416945063f5e3c462936107499390600401611db3565b602060405180830381600087803b15801561076357600080fd5b505af1158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079b9190810190611cfa565b9050806000146107e86040518060400160405280601c81526020017f6c6971756964617465206661696c206572633230202d206572726320000000008152506107e3846112e0565b6113a3565b906108065760405162461bcd60e51b81526004016102e79190611e71565b5050505b60208101516040516370a0823160e01b81526000916001600160a01b0316906370a082319061083d903090600401611d6c565b60206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061088d9190810190611cfa565b9050600082602001516001600160a01b031663db006a75836040518263ffffffff1660e01b81526004016108c19190612056565b602060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109139190810190611cfa565b9050806000146109516040518060400160405280601381526020017203932b2b232b6903330b4b610169032b939319606d1b8152506107e3846112e0565b9061096f5760405162461bcd60e51b81526004016102e79190611e71565b5060208301516000906001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed51415610a1f5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc263d0e30db06109bf306113cf565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29050610a99565b83602001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a96919081019061199a565b90505b608084015160a085015160405163a9059cbb60e01b81526000926001600160a01b0385169263a9059cbb92610ad2929190600401611d80565b602060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b249190810190611c08565b905080610b435760405162461bcd60e51b81526004016102e790611f5a565b505050505050505050565b736b175474e89094c44da98b954eedeac495271d0f81565b6000546060906001600160a01b03163314610b935760405162461bcd60e51b81526004016102e790611fe2565b604051631853304760e31b81526001600160a01b0385169063c299823890610bc19086908690600401611dd6565b600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c179190810190611b70565b949350505050565b734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b6000546001600160a01b03163314610c615760405162461bcd60e51b81526004016102e790611fe2565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610c90903090600401611d6c565b60206040518083038186803b158015610ca857600080fd5b505afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ce09190810190611cfa565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb90610d119033908590600401611d80565b602060405180830381600087803b158015610d2b57600080fd5b505af1158015610d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d639190810190611c08565b505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b031681565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b6000546001600160a01b03163314610dce5760405162461bcd60e51b81526004016102e790611fe2565b336108fc610ddb306113cf565b6040518115909202916000818181858888f19350505050158015610e03573d6000803e3d6000fd5b50565b3360009081526001602052604081205460ff16610e355760405162461bcd60e51b81526004016102e790611f36565b826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e7057600080fd5b505af1158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea8919081019061199a565b6001600160a01b0316846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f24919081019061199a565b6001600160a01b031614610f4a5760405162461bcd60e51b81526004016102e790611e84565b60008211610f6a5760405162461bcd60e51b81526004016102e790611ec7565b600080610f7786866113dc565b915091506000610f878383611553565b90506000806000610f9a84878a886116d7565b925092509250610fa8611949565b6040518060c001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018d6001600160a01b031681526020018a8152602001866001600160a01b031681526020018381525090506000866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110299190611d6c565b60206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110799190810190611cfa565b9050856001600160a01b031663022c0d9f8686308660405160200161109e9190612005565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016110cc949392919061205f565b600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038a1691506370a082319061112d903090600401611d6c565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061117d9190810190611cfa565b905081811161119e5760405162461bcd60e51b81526004016102e790611f18565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906111cc9033908590600401611d80565b602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061121e9190810190611c08565b50039c9b505050505050505050505050565b600080546001600160a01b0316331461125b5760405162461bcd60e51b81526004016102e790611fe2565b604051630ede4edd60e41b81526001600160a01b0384169063ede4edd090611287908590600401611d6c565b602060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d99190810190611cfa565b9392505050565b60608161130557506040805180820190915260018152600360fc1b602082015261139e565b8160005b811561131d57600101600a82049150611309565b6060816040519080825280601f01601f19166020018201604052801561134a576020820181803883390190505b50905060001982015b851561139857600a860660300160f81b8282806001900393508151811061137657fe5b60200101906001600160f81b031916908160001a905350600a86049550611353565b50925050505b919050565b606082826040516020016113b8929190611d3e565b604051602081830303815290604052905092915050565b6001600160a01b03163190565b6000806001600160a01b038416734ddc2d193948926d02f9b1fe9e1daa0718270ed514156114205773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29150611496565b836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611493919081019061199a565b91505b6001600160a01b038316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156114d6575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261154c565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611549919081019061199a565b90505b9250929050565b6000816001600160a01b0316836001600160a01b031614156115c8576001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156115b057736b175474e89094c44da98b954eedeac495271d0f91506115c8565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b60405163e6a4390560e01b8152600090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a43905906116049087908790600401611d99565b60206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611654919081019061199a565b90506001600160a01b03811661167c5760405162461bcd60e51b81526004016102e790611ef7565b806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b50929695505050505050565b600080600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061174e919081019061199a565b90506000886001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561178b57600080fd5b505afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117c3919081019061199a565b9050816001600160a01b0316886001600160a01b0316146117e55760006117e7565b865b9450806001600160a01b0316886001600160a01b03161461180957600061180b565b865b935060008060008b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561184b57600080fd5b505afa15801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118839190810190611ca6565b63ffffffff1692506001600160701b031692506001600160701b031692506000856001600160a01b03168c6001600160a01b0316146118c257826118c4565b835b90506000866001600160a01b03168d6001600160a01b0316146118e757846118e9565b835b90508a6001600160a01b03168d6001600160a01b03161415611918576103e56103e88d02046001019750611938565b6103e8818d02026103e58d84030280828161192f57fe5b04600101995050505b505050505050509450945094915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60006020828403121561198f578081fd5b81356112d981612119565b6000602082840312156119ab578081fd5b81516112d981612119565b600080604083850312156119c8578081fd5b82356119d381612119565b915060208301356119e381612119565b809150509250929050565b60008060008060808587031215611a03578182fd5b8435611a0e81612119565b93506020850135611a1e81612119565b92506040850135611a2e81612119565b9396929550929360600135925050565b600080600060408486031215611a52578283fd5b8335611a5d81612119565b9250602084013567ffffffffffffffff80821115611a79578384fd5b81860187601f820112611a8a578485fd5b8035925081831115611a9a578485fd5b8760208085028301011115611aad578485fd5b949760209095019650909450505050565b60008060008060808587031215611ad3578384fd5b8435611ade81612119565b93506020850135925060408501359150606085013567ffffffffffffffff80821115611b08578283fd5b81870188601f820112611b19578384fd5b8035925081831115611b29578384fd5b611b3c601f8401601f1916602001612096565b9150828252886020848301011115611b52578384fd5b611b638360208401602084016120dd565b5094979396509194505050565b60006020808385031215611b82578182fd5b825167ffffffffffffffff811115611b98578283fd5b80840185601f820112611ba9578384fd5b80519150611bbe611bb9836120bd565b612096565b8281528381019082850185850284018601891015611bda578687fd5b8693505b84841015611bfc578051835260019390930192918501918501611bde565b50979650505050505050565b600060208284031215611c19578081fd5b815180151581146112d9578182fd5b600060c08284031215611c39578081fd5b611c4360c0612096565b8251611c4e81612119565b81526020830151611c5e81612119565b60208201526040830151611c7181612119565b6040820152606083810151908201526080830151611c8e81612119565b608082015260a0928301519281019290925250919050565b600080600060608486031215611cba578283fd5b8351611cc58161212e565b6020850151909350611cd68161212e565b604085015190925063ffffffff81168114611cef578182fd5b809150509250925092565b600060208284031215611d0b578081fd5b5051919050565b60008151808452611d2a8160208601602086016120e9565b601f01601f19169290920160200192915050565b60008351611d508184602088016120e9565b8351908301611d638282602088016120e9565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252810182905260008360408301825b85811015611e19578235611dfc81612119565b6001600160a01b0316825260209283019290910190600101611de9565b5095945050505050565b602080825282518282018190526000918401906040840190835b81811015611e5b578351835260209384019390920191600101611e3d565b509095945050505050565b901515815260200190565b6000602082526112d96020830184611d12565b60208082526023908201527f63546f6b656e73206861766520646966666572656e7420636f6d7074726f6c6c60408201526265727360e81b606082015260800190565b6020808252601690820152751e995c9bc81c995c185e509bdc9c9bddd05b5bdd5b9d60521b604082015260600190565b6020808252600790820152663737903830b4b960c91b604082015260600190565b6020808252600490820152636e6f706560e01b604082015260600190565b6020808252600a90820152693737ba1031b0b63632b960b11b604082015260600190565b602080825260159082015274195c98cc8c081d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6020808252601d908201527f73656e646572206e6565647320746f206265206c697175696461746f72000000604082015260600190565b602080825260089082015267062616420737761760c41b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519091169082015260a0918201519181019190915260c00190565b90815260200190565b600085825284602083015260018060a01b03841660408301526080606083015261208c6080830184611d12565b9695505050505050565b60405181810167ffffffffffffffff811182821017156120b557600080fd5b604052919050565b600067ffffffffffffffff8211156120d3578081fd5b5060209081020190565b82818337506000910152565b60005b838110156121045781810151838201526020016120ec565b83811115612113576000848401525b50505050565b6001600160a01b0381168114610e0357600080fd5b6001600160701b0381168114610e0357600080fdfea2646970667358221220f59e26e95d1f3cec747e2c4dbd6ffa33a3279c8fbf3d053354b377fa38b918ad64736f6c63430006000033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806351cff8d91161007f5780639bf710d4116100595780639bf710d41461022e578063a0ef91df14610243578063aab3f86814610258578063f53cc4b314610285576100e8565b806351cff8d9146101cc5780637bbf4a3f146101ec5780638da5cb5b14610219576100e8565b806310d1e85c116100bb57806310d1e85c146101555780632a4c0a1a146101755780634883400d1461018a5780634ab45d33146101b7576100e8565b8063040141e5146100ea578063052d33841461011557806306bd1ba014610135576100e8565b366100e857005b005b3480156100f657600080fd5b506100ff6102a5565b60405161010c9190611d6c565b60405180910390f35b34801561012157600080fd5b506100e861013036600461197e565b6102bd565b34801561014157600080fd5b506100e861015036600461197e565b610317565b34801561016157600080fd5b506100e8610170366004611abe565b610362565b34801561018157600080fd5b506100ff610b4e565b34801561019657600080fd5b506101aa6101a5366004611a3e565b610b66565b60405161010c9190611e23565b3480156101c357600080fd5b506100ff610c1f565b3480156101d857600080fd5b506100e86101e736600461197e565b610c37565b3480156101f857600080fd5b5061020c61020736600461197e565b610d68565b60405161010c9190611e66565b34801561022557600080fd5b506100ff610d7d565b34801561023a57600080fd5b506100ff610d8c565b34801561024f57600080fd5b506100e8610da4565b34801561026457600080fd5b506102786102733660046119ee565b610e06565b60405161010c9190612056565b34801561029157600080fd5b506102786102a03660046119b6565b611230565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6000546001600160a01b031633146102f05760405162461bcd60e51b81526004016102e790611fe2565b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031633146103415760405162461bcd60e51b81526004016102e790611fe2565b6001600160a01b03166000908152600160205260409020805460ff19169055565b306001600160a01b0385161461038a5760405162461bcd60e51b81526004016102e790611f89565b610392611949565b818060200190516103a69190810190611c28565b80519091506001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156104b2576060810151604051632e1a7d4d60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291632e1a7d4d9161040a9190600401612056565b600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b5050505080600001516001600160a01b031663aae40a2a8260600151836040015184602001516040518463ffffffff1660e01b815260040161047b929190611d99565b6000604051808303818588803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050505061080a565b806060015181600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061052e919081019061199a565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105599190611d6c565b60206040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a99190810190611cfa565b10156105c75760405162461bcd60e51b81526004016102e790611fc0565b600081600001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561060857600080fd5b505af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610640919081019061199a565b825160405163095ea7b360e01b81529192506001600160a01b0383169163095ea7b39161067291600090600401611d80565b600060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b50508351606085015160405163095ea7b360e01b81526001600160a01b038616945063095ea7b393506106d7929190600401611d80565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b50508351604080860151606087015160208801519251637af1e23160e11b8152600096506001600160a01b03909416945063f5e3c462936107499390600401611db3565b602060405180830381600087803b15801561076357600080fd5b505af1158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061079b9190810190611cfa565b9050806000146107e86040518060400160405280601c81526020017f6c6971756964617465206661696c206572633230202d206572726320000000008152506107e3846112e0565b6113a3565b906108065760405162461bcd60e51b81526004016102e79190611e71565b5050505b60208101516040516370a0823160e01b81526000916001600160a01b0316906370a082319061083d903090600401611d6c565b60206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061088d9190810190611cfa565b9050600082602001516001600160a01b031663db006a75836040518263ffffffff1660e01b81526004016108c19190612056565b602060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109139190810190611cfa565b9050806000146109516040518060400160405280601381526020017203932b2b232b6903330b4b610169032b939319606d1b8152506107e3846112e0565b9061096f5760405162461bcd60e51b81526004016102e79190611e71565b5060208301516000906001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed51415610a1f5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc263d0e30db06109bf306113cf565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109ea57600080fd5b505af11580156109fe573d6000803e3d6000fd5b505050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29050610a99565b83602001516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a96919081019061199a565b90505b608084015160a085015160405163a9059cbb60e01b81526000926001600160a01b0385169263a9059cbb92610ad2929190600401611d80565b602060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b249190810190611c08565b905080610b435760405162461bcd60e51b81526004016102e790611f5a565b505050505050505050565b736b175474e89094c44da98b954eedeac495271d0f81565b6000546060906001600160a01b03163314610b935760405162461bcd60e51b81526004016102e790611fe2565b604051631853304760e31b81526001600160a01b0385169063c299823890610bc19086908690600401611dd6565b600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c179190810190611b70565b949350505050565b734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b6000546001600160a01b03163314610c615760405162461bcd60e51b81526004016102e790611fe2565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610c90903090600401611d6c565b60206040518083038186803b158015610ca857600080fd5b505afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ce09190810190611cfa565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb90610d119033908590600401611d80565b602060405180830381600087803b158015610d2b57600080fd5b505af1158015610d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d639190810190611c08565b505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b031681565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b6000546001600160a01b03163314610dce5760405162461bcd60e51b81526004016102e790611fe2565b336108fc610ddb306113cf565b6040518115909202916000818181858888f19350505050158015610e03573d6000803e3d6000fd5b50565b3360009081526001602052604081205460ff16610e355760405162461bcd60e51b81526004016102e790611f36565b826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e7057600080fd5b505af1158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea8919081019061199a565b6001600160a01b0316846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f24919081019061199a565b6001600160a01b031614610f4a5760405162461bcd60e51b81526004016102e790611e84565b60008211610f6a5760405162461bcd60e51b81526004016102e790611ec7565b600080610f7786866113dc565b915091506000610f878383611553565b90506000806000610f9a84878a886116d7565b925092509250610fa8611949565b6040518060c001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018d6001600160a01b031681526020018a8152602001866001600160a01b031681526020018381525090506000866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110299190611d6c565b60206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110799190810190611cfa565b9050856001600160a01b031663022c0d9f8686308660405160200161109e9190612005565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016110cc949392919061205f565b600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038a1691506370a082319061112d903090600401611d6c565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061117d9190810190611cfa565b905081811161119e5760405162461bcd60e51b81526004016102e790611f18565b60405163a9059cbb60e01b81526001600160a01b0389169063a9059cbb906111cc9033908590600401611d80565b602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061121e9190810190611c08565b50039c9b505050505050505050505050565b600080546001600160a01b0316331461125b5760405162461bcd60e51b81526004016102e790611fe2565b604051630ede4edd60e41b81526001600160a01b0384169063ede4edd090611287908590600401611d6c565b602060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d99190810190611cfa565b9392505050565b60608161130557506040805180820190915260018152600360fc1b602082015261139e565b8160005b811561131d57600101600a82049150611309565b6060816040519080825280601f01601f19166020018201604052801561134a576020820181803883390190505b50905060001982015b851561139857600a860660300160f81b8282806001900393508151811061137657fe5b60200101906001600160f81b031916908160001a905350600a86049550611353565b50925050505b919050565b606082826040516020016113b8929190611d3e565b604051602081830303815290604052905092915050565b6001600160a01b03163190565b6000806001600160a01b038416734ddc2d193948926d02f9b1fe9e1daa0718270ed514156114205773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29150611496565b836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611493919081019061199a565b91505b6001600160a01b038316734ddc2d193948926d02f9b1fe9e1daa0718270ed514156114d6575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261154c565b826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611549919081019061199a565b90505b9250929050565b6000816001600160a01b0316836001600160a01b031614156115c8576001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214156115b057736b175474e89094c44da98b954eedeac495271d0f91506115c8565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b60405163e6a4390560e01b8152600090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a43905906116049087908790600401611d99565b60206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611654919081019061199a565b90506001600160a01b03811661167c5760405162461bcd60e51b81526004016102e790611ef7565b806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b50929695505050505050565b600080600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061174e919081019061199a565b90506000886001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561178b57600080fd5b505afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117c3919081019061199a565b9050816001600160a01b0316886001600160a01b0316146117e55760006117e7565b865b9450806001600160a01b0316886001600160a01b03161461180957600061180b565b865b935060008060008b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561184b57600080fd5b505afa15801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118839190810190611ca6565b63ffffffff1692506001600160701b031692506001600160701b031692506000856001600160a01b03168c6001600160a01b0316146118c257826118c4565b835b90506000866001600160a01b03168d6001600160a01b0316146118e757846118e9565b835b90508a6001600160a01b03168d6001600160a01b03161415611918576103e56103e88d02046001019750611938565b6103e8818d02026103e58d84030280828161192f57fe5b04600101995050505b505050505050509450945094915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60006020828403121561198f578081fd5b81356112d981612119565b6000602082840312156119ab578081fd5b81516112d981612119565b600080604083850312156119c8578081fd5b82356119d381612119565b915060208301356119e381612119565b809150509250929050565b60008060008060808587031215611a03578182fd5b8435611a0e81612119565b93506020850135611a1e81612119565b92506040850135611a2e81612119565b9396929550929360600135925050565b600080600060408486031215611a52578283fd5b8335611a5d81612119565b9250602084013567ffffffffffffffff80821115611a79578384fd5b81860187601f820112611a8a578485fd5b8035925081831115611a9a578485fd5b8760208085028301011115611aad578485fd5b949760209095019650909450505050565b60008060008060808587031215611ad3578384fd5b8435611ade81612119565b93506020850135925060408501359150606085013567ffffffffffffffff80821115611b08578283fd5b81870188601f820112611b19578384fd5b8035925081831115611b29578384fd5b611b3c601f8401601f1916602001612096565b9150828252886020848301011115611b52578384fd5b611b638360208401602084016120dd565b5094979396509194505050565b60006020808385031215611b82578182fd5b825167ffffffffffffffff811115611b98578283fd5b80840185601f820112611ba9578384fd5b80519150611bbe611bb9836120bd565b612096565b8281528381019082850185850284018601891015611bda578687fd5b8693505b84841015611bfc578051835260019390930192918501918501611bde565b50979650505050505050565b600060208284031215611c19578081fd5b815180151581146112d9578182fd5b600060c08284031215611c39578081fd5b611c4360c0612096565b8251611c4e81612119565b81526020830151611c5e81612119565b60208201526040830151611c7181612119565b6040820152606083810151908201526080830151611c8e81612119565b608082015260a0928301519281019290925250919050565b600080600060608486031215611cba578283fd5b8351611cc58161212e565b6020850151909350611cd68161212e565b604085015190925063ffffffff81168114611cef578182fd5b809150509250925092565b600060208284031215611d0b578081fd5b5051919050565b60008151808452611d2a8160208601602086016120e9565b601f01601f19169290920160200192915050565b60008351611d508184602088016120e9565b8351908301611d638282602088016120e9565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252810182905260008360408301825b85811015611e19578235611dfc81612119565b6001600160a01b0316825260209283019290910190600101611de9565b5095945050505050565b602080825282518282018190526000918401906040840190835b81811015611e5b578351835260209384019390920191600101611e3d565b509095945050505050565b901515815260200190565b6000602082526112d96020830184611d12565b60208082526023908201527f63546f6b656e73206861766520646966666572656e7420636f6d7074726f6c6c60408201526265727360e81b606082015260800190565b6020808252601690820152751e995c9bc81c995c185e509bdc9c9bddd05b5bdd5b9d60521b604082015260600190565b6020808252600790820152663737903830b4b960c91b604082015260600190565b6020808252600490820152636e6f706560e01b604082015260600190565b6020808252600a90820152693737ba1031b0b63632b960b11b604082015260600190565b602080825260159082015274195c98cc8c081d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6020808252601d908201527f73656e646572206e6565647320746f206265206c697175696461746f72000000604082015260600190565b602080825260089082015267062616420737761760c41b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519091169082015260a0918201519181019190915260c00190565b90815260200190565b600085825284602083015260018060a01b03841660408301526080606083015261208c6080830184611d12565b9695505050505050565b60405181810167ffffffffffffffff811182821017156120b557600080fd5b604052919050565b600067ffffffffffffffff8211156120d3578081fd5b5060209081020190565b82818337506000910152565b60005b838110156121045781810151838201526020016120ec565b83811115612113576000848401525b50505050565b6001600160a01b0381168114610e0357600080fd5b6001600160701b0381168114610e0357600080fdfea2646970667358221220f59e26e95d1f3cec747e2c4dbd6ffa33a3279c8fbf3d053354b377fa38b918ad64736f6c63430006000033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 282,
        "contract": "contracts/CompoundLiquidator.sol:CompoundLiquidator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 286,
        "contract": "contracts/CompoundLiquidator.sol:CompoundLiquidator",
        "label": "callers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1713800",
      "executionCost": "43551",
      "totalCost": "1757351"
    },
    "external": {
      "": "175",
      "CETH_ADDRESS()": "341",
      "DAI_ADDRESS()": "297",
      "UNISWAP_FACTORY_ADDRESS()": "274",
      "WETH_ADDRESS()": "276",
      "blacklistCaller(address)": "22106",
      "callers(address)": "1303",
      "enterMarkets(address,address[])": "infinite",
      "exitMarket(address,address)": "infinite",
      "liquidate(address,address,address,uint256)": "infinite",
      "owner()": "1137",
      "uniswapV2Call(address,uint256,uint256,bytes)": "infinite",
      "whitelistCaller(address)": "22102",
      "withdraw(address)": "infinite",
      "withdrawEth()": "infinite"
    },
    "internal": {
      "getAmounts(address,address,uint256,address)": "infinite",
      "getUnderlyings(address,address)": "infinite",
      "getUniswapPair(address,address)": "infinite"
    }
  }
}