{
  "language": "Solidity",
  "sources": {
    "contracts/CompoundLiquidator.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Pair.sol\";\nimport \"./IUniswapV2Callee.sol\";\nimport \"./ICToken.sol\";\nimport \"./MyERC20.sol\";\nimport \"./WETH9.sol\";\nimport \"./IComptroller.sol\";\nimport \"./Utils.sol\";\n\ncontract CompoundLiquidator is IUniswapV2Callee {\n    address constant public WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address constant public CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    address public owner;\n\n    struct Data {\n        address cTokenBorrowed;\n        address cTokenCollateral;\n        address borrowAccount;\n        uint repayBorrowAmount;\n        address uniswapPair;\n        uint swapCollateralAmount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // Required to receive ether\n    fallback() external payable {}\n    receive() external payable {}\n\n    function liquidate(\n        address borrowAccount,\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 repayBorrowAmount,\n        address uniswapFactory\n    ) external returns (uint) {\n        require(owner == msg.sender, \"not owner\");\n        require(cTokenBorrowed != cTokenCollateral, \"cTokenBorrowed and cTokenCollateral are the same\");\n        require(ICToken(cTokenBorrowed).comptroller() == ICToken(cTokenCollateral).comptroller(), \"cTokens have different comptrollers\");\n        require(repayBorrowAmount > 0, \"zero repayBorrowAmount\");\n\n        (address borrowedToken, address collateralToken) = getUnderlyings(cTokenBorrowed, cTokenCollateral);\n        address uniswapPair = IUniswapV2Factory(uniswapFactory).getPair(borrowedToken, collateralToken);\n        require(uniswapPair != address(0), \"uniswap pair doesn't exist\");\n\n        (uint amount0Out, uint amount1Out, uint swapCollateralAmount) = getAmounts(uniswapPair, borrowedToken, repayBorrowAmount);\n\n        Data memory data = Data({\n            cTokenBorrowed: cTokenBorrowed,\n            cTokenCollateral: cTokenCollateral,\n            borrowAccount: borrowAccount,\n            repayBorrowAmount: repayBorrowAmount,\n            uniswapPair: uniswapPair,\n            swapCollateralAmount: swapCollateralAmount\n        });\n\n        uint startBalance = MyERC20(collateralToken).balanceOf(address(this));\n\n        // 1. Initiate flash loan (either amount0Out or amount1Out will be zero)\n        IUniswapV2Pair(uniswapPair).swap(amount0Out, amount1Out, address(this), abi.encode(data));\n        uint endBalance = MyERC20(collateralToken).balanceOf(address(this));\n\n        if (endBalance < startBalance) {\n            require(false, \"end balance less than start balance\");\n        }\n    }\n\n    function getUnderlyings(address cTokenBorrowed, address cTokenCollateral) internal \n    returns (address borrowedToken, address collateralToken) {\n        // cEther has no underlying() method smh, have to use WETH with uniswap\n        if (cTokenBorrowed == CETH_ADDRESS) {\n            borrowedToken = WETH_ADDRESS;\n        } else {\n            borrowedToken = ICToken(cTokenBorrowed).underlying();\n        }\n\n        if (cTokenCollateral == CETH_ADDRESS) {\n            collateralToken = WETH_ADDRESS;\n        } else {\n            collateralToken = ICToken(cTokenCollateral).underlying();\n        }\n    }\n\n    function getAmounts(address uniswapPair, address tokenOut, uint amountOut) internal \n    returns (uint amount0Out, uint amount1Out, uint amountIn) {\n        address pairToken0 = IUniswapV2Pair(uniswapPair).token0();\n        address pairToken1 = IUniswapV2Pair(uniswapPair).token1();\n        // amount out\n        amount0Out = tokenOut == pairToken0 ? amountOut : 0;\n        amount1Out = tokenOut == pairToken1 ? amountOut : 0;\n        // amount in\n        (uint reserve0, uint reserve1, uint blockTs) = IUniswapV2Pair(uniswapPair).getReserves();\n        uint reserveOut = tokenOut == pairToken0 ? reserve0 : reserve1;\n        uint reserveIn = tokenOut == pairToken0 ? reserve1 : reserve0;\n        amountIn = getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    // Stolen from uniswap v2 library\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        uint numerator = reserveIn * amountOut * 1000;\n        uint denominator = (reserveOut - amountOut) * 997;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    function uniswapV2Call(\n        address sender, \n        uint amount0, \n        uint amount1, \n        bytes memory _data\n    ) public override {\n        Data memory data = abi.decode(_data, (Data));\n        require(address(this) == sender, \"sender needs to be liquidator\");\n\n        // 2. Repay borrowed loan and receive collateral\n        if (data.cTokenBorrowed == CETH_ADDRESS) {\n            // We got WETH from uniswap, unwrap to ETH\n            WETH9(WETH_ADDRESS).withdraw(data.repayBorrowAmount);\n\n            // Do the liquidate, value() specifies the repay amount in ETH\n            ICEther(data.cTokenBorrowed).liquidateBorrow.value(data.repayBorrowAmount)(data.borrowAccount, data.cTokenCollateral);\n        } else {\n            require(MyERC20(ICToken(data.cTokenBorrowed).underlying()).balanceOf(address(this)) >= data.repayBorrowAmount, \"bad swap\");\n            // Easy we already have the balance\n            MyERC20(ICToken(data.cTokenBorrowed).underlying()).approve(data.cTokenBorrowed, data.repayBorrowAmount);\n\n            uint res = ICERC20(data.cTokenBorrowed).liquidateBorrow(data.borrowAccount, data.repayBorrowAmount, data.cTokenCollateral);\n\n            require(res == 0, Utils.concat('liquidate fail erc20 - errc ', Utils.uint2str(res)));\n        }\n\n        // 3. Redeem collateral cToken for collateral\n        uint collateralTokens = ICToken(data.cTokenCollateral).balanceOf(address(this));\n\n        uint res = ICToken(data.cTokenCollateral).redeem(collateralTokens);\n        require(res == 0, Utils.concat('reedem fail - errc ', Utils.uint2str(res)));\n\n        address collateralTokenUnderlying;\n        if (data.cTokenCollateral == CETH_ADDRESS) {\n            // Uniswap needs us to have a balance of WETH to trade out\n            // We can just swap our whole balance to WETH here, since we withdraw by ERC20 in other cases\n            WETH9(WETH_ADDRESS).deposit.value(Utils.getBalance(address(this)))();\n            collateralTokenUnderlying = WETH_ADDRESS;\n        } else {\n            collateralTokenUnderlying = ICToken(data.cTokenCollateral).underlying();\n        }\n\n        // 4. Now the flash loan can go through because we have a balance of collateral token to swap for our borrowed tokens\n        MyERC20(collateralTokenUnderlying).transfer(data.uniswapPair, data.swapCollateralAmount);\n    }\n\n    function withdraw(address token) external {\n        require(msg.sender == owner, \"not owner\");\n\n        uint balance = MyERC20(token).balanceOf(address(this));\n\n        MyERC20(token).transfer(msg.sender, balance);\n    }\n\n    function withdrawEth() external {\n        require(msg.sender == owner, \"not owner\");\n\n        msg.sender.send(Utils.getBalance(address(this)));\n    }\n\n    function enterMarkets(address comptroller, address[] calldata cTokens) external returns (uint[] memory) {\n        require(msg.sender == owner, \"not owner\");\n        return IComptroller(comptroller).enterMarkets(cTokens);\n    }\n\n    function exitMarket(address comptroller, address cToken) external returns (uint) {\n        require(msg.sender == owner, \"not owner\");\n        return IComptroller(comptroller).exitMarket(cToken);\n    }\n}\n"
    },
    "contracts/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.6.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "contracts/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.6.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/IUniswapV2Callee.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}"
    },
    "contracts/ICToken.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface ICToken {\n    // Constants\n    function comptroller() external returns (address);\n    function underlying() external returns (address); // TODO remove\n\n    // ERC 20\n    function symbol() external view returns (string memory);\n    function balanceOf(address) external view returns (uint);\n\n    // Compound\n    function redeem(uint redeemTokens) external returns (uint);\n\n    function borrowBalanceStored(address account) external view returns (uint);\n}\n\ninterface ICEther {    \n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function mint() external payable;\n\n    function borrow(uint borrowAmount) external returns (uint);\n\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\n    function balanceOf(address) external view returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n}\n\ninterface ICERC20 {\n    function underlying() external view returns (address);\n\n    function mint(uint mintAmount) external returns (uint);\n\n    function borrow(uint borrowAmount) external returns (uint);\n\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\n\n    // Comes from CToken, but cant do inheritance on interfaces so sticking here\n    function balanceOf(address) external view returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n}\n"
    },
    "contracts/MyERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface MyERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    function symbol() external view returns (string memory symb);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}"
    },
    "contracts/WETH9.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface WETH9 {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n    event Deposit(address indexed dst, uint wad);\n    event Withdrawal(address indexed src, uint wad);\n\n    function deposit() external payable;\n\n    function withdraw(uint wad) external;\n\n    function totalSupply() external view returns (uint);\n\n    function approve(address guy, uint wad) external returns (bool);\n\n    function transfer(address dst, uint wad) external returns (bool);\n\n    function transferFrom(address src, address dst, uint wad) external;\n\n    function balanceOf(address _owner) external view returns (uint balance);\n}"
    },
    "contracts/IComptroller.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IComptroller {\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\n    // bool public constant isComptroller = true;\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\n\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint borrowerIndex) external;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        uint seizeTokens) external;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external returns (uint);\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external;\n\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint repayAmount) external view returns (uint, uint);\n\n    function closeFactorMantissa() external view returns (uint);\n\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n\n    function markets(address cTokenAddress) external view returns (bool, uint);\n\n    // Impl\n    function oracle() external view returns (address);\n\n    function _setPriceOracle(address newOracle) external returns (uint);\n}\n"
    },
    "contracts/Utils.sol": {
      "content": "pragma solidity ^0.6.0;\n\nlibrary Utils {\n    function uint2str(uint _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function int2str(int i) internal pure returns (string memory) {\n        if (i == 0) return \"0\";\n        bool negative = i < 0;\n        uint j = uint(negative ? -i : i);\n        uint l = j;     // Keep an unsigned copy\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        if (negative) ++len;  // Make room for '-' sign\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (l != 0){\n            bstr[k--] = byte(48 + uint8(l) % 10);\n            l /= 10;\n        }\n        if (negative) {    // Prepend '-'\n            bstr[0] = '-';\n        }\n        return string(bstr);\n    }\n\n    function addr2str(address x) internal pure returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2*i] = char(hi);\n            s[2*i+1] = char(lo);            \n        }\n        return string(s);\n    }\n\n    function char(byte b) internal pure returns (byte) {\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n    function getBalance(address addr) internal view returns (uint) {\n        return addr.balance;\n    }\n\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\n      return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b));\n    }\n}"
    },
    "contracts/DydxFlashloanBase.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./ISoloMargin.sol\";\n\n\ncontract DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ISoloMargin.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n    struct Value {\n        uint256 value;\n    }\n}\n\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId => Market\n        mapping(uint256 => Market) markets;\n        // owner => account number => Account\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address => mapping(address => bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address => bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\n\ninterface ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 calldata spreadPremium\n    ) external;\n\n    function getIsGlobalOperator(address operator) external view returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n        external;\n\n    function getAccountValues(Account.Info calldata account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function getMarketInterestSetter(uint256 marketId)\n        external\n        view\n        returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId)\n        external\n        view\n        returns (Decimal.D256 memory);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n        external\n        returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value calldata minBorrowedValue)\n        external;\n\n    function ownerSetLiquidationSpread(Decimal.D256 calldata spread) external;\n\n    function ownerSetEarningsRate(Decimal.D256 calldata earningsRate) external;\n\n    function getIsLocalOperator(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function getAccountPar(Account.Info calldata account, uint256 marketId)\n        external\n        view\n        returns (Types.Par memory);\n\n    function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 calldata marginPremium\n    ) external;\n\n    function getMarginRatio() external view returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId)\n        external\n        view\n        returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\n\n    function getRiskParams() external view returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info calldata account)\n        external\n        view\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n\n    function renounceOwnership() external;\n\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] calldata args) external;\n\n    function getMarketPrice(uint256 marketId) external view returns (address);\n\n    function owner() external view returns (address);\n\n    function isOwner() external view returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n        external\n        returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 calldata marginPremium,\n        Decimal.D256 calldata spreadPremium\n    ) external;\n\n    function operate(\n        Account.Info[] calldata accounts,\n        Actions.ActionArgs[] calldata actions\n    ) external;\n\n    function getMarketWithInfo(uint256 marketId)\n        external\n        view\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 calldata ratio) external;\n\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info calldata account, uint256 marketId)\n        external\n        view\n        returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId)\n        external\n        view\n        returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    ) external view returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId)\n        external\n        view\n        returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId)\n        external\n        view\n        returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info calldata account)\n        external\n        view\n        returns (uint8);\n\n    function getEarningsRate() external view returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\n\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId)\n        external\n        view\n        returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\n\n    function ownerSetGlobalOperator(address operator, bool approved) external;\n\n    function transferOwnership(address newOwner) external;\n\n    function getAdjustedAccountValues(Account.Info calldata account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId)\n        external\n        view\n        returns (Interest.Rate memory);\n}\n"
    },
    "contracts/ICallee.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport { Account } from \"./ISoloMargin.sol\";\n\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ninterface ICallee {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info calldata accountInfo,\n        bytes calldata data\n    )\n        external;\n}\n"
    },
    "contracts/IKyberNetwork.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract IKyberNetwork {\n    event KyberTrade(\n        IERC20 indexed src,\n        IERC20 indexed dest,\n        uint256 ethWeiValue,\n        uint256 networkFeeWei,\n        uint256 customPlatformFeeWei,\n        bytes32[] t2eIds,\n        bytes32[] e2tIds,\n        uint256[] t2eSrcAmounts,\n        uint256[] e2tSrcAmounts,\n        uint256[] t2eRates,\n        uint256[] e2tRates\n    );\n}"
    },
    "contracts/IKyberNetworkProxy.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// Note: Kyber uses it owns ERC20 interface\n// See: https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\nimport { IERC20 as ERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IKyberNetworkProxyInterface {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\n\n    event ExecuteTrade(address indexed trader, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n}\n\ninterface SimpleNetworkInterface {\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) external returns(uint);\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) external returns(uint);\n}\n\nabstract contract IKyberNetworkProxy is IKyberNetworkProxyInterface, SimpleNetworkInterface {}\n"
    },
    "contracts/IUniswapExchange.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IUniswapExchange {\n    event TokenPurchase(address buyer, uint256 eth_sold, uint256 tokens_bought);\n    event EthPurchase(address buyer, uint256 tokens_sold, uint256 eth_bought);\n    event AddLiquidity(address provider, uint256 eth_amount, uint256 token_amount);\n    event RemoveLiquidity(address provider, uint256 eth_amount, uint256 token_amount);\n    event Transfer(address _from, address _to, uint256 _value);\n    event Approval(address _owner, address _spender, uint256 _value);\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256 tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    function name() external view returns (bytes32);\n    function symbol() external view returns (bytes32);\n    function decimals() external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}"
    },
    "contracts/IUniswapFactory.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IUniswapFactory {\n    event NewExchange(address token, address exchange);\n    // Create Exchange\n    function createExchange(address token) external returns (address exchange);\n    // Get Exchange and Token Info\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n    // Never use\n    function initializeFactory(address template) external;\n}"
    },
    "contracts/Migrations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.7.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"
    },
    "contracts/Strategy.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DydxFlashloanBase.sol\";\nimport \"./ICallee.sol\";\nimport \"./IKyberNetworkProxy.sol\";\nimport \"./MyERC20.sol\"; // Has decimals()\nimport \"./Utils.sol\";\n\ncontract StrategyV1 is ICallee, DydxFlashloanBase {\n    mapping (address => uint) internal owners;\n    mapping (address => uint) internal callPermitted;\n\n    address constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct CallData {\n        address solo;\n        address kyber;\n\n        address tokenA;\n        uint256 rateAB;\n        address tokenB;\n        uint256 rateBC;\n        address tokenC;\n        uint256 rateCA;\n\n        uint256 amountA;\n        uint256 minReturnA;\n    }\n\n    event LOG(\n        uint amount0,\n        uint amount1,\n        uint amount2,\n        uint amount3\n    );\n\n    constructor() public {\n        owners[msg.sender] = 1;\n    }\n\n    // Required to receive ether\n    fallback() external payable {}\n    receive() external payable {}\n\n    modifier ownerOnly() {\n        require(owners[msg.sender] == 1, \"me/naw\");\n        _;\n    }\n\n    modifier permitted() {\n        require(callPermitted[msg.sender] == 1, \"me/no\");\n        _;\n    }\n\n    function grant(address usr) external ownerOnly {\n        owners[usr] = 1;\n    }\n\n    function revoke(address usr) external ownerOnly {\n        // TODO prevent creator from exiting?\n        owners[usr] = 0;\n    }\n\n    function withdraw(address token, uint256 amount) external ownerOnly {\n        // TODO do max to avoid revert\n        if (token == KYBER_ETH_ADDRESS) {\n            payable(address(msg.sender)).transfer(amount);\n        } else {\n            MyERC20(token).transfer(msg.sender, amount);\n        }\n    }\n\n    function trade(CallData calldata _cd) external payable ownerOnly {\n        CallData memory cd = _cd;\n\n        // Solo does not support ether loans, directly \n        // initiate the swap from our balance\n        // TODO solo does not have balance of token\n        bool noLoan = false;\n\n        uint myTokenBalance = 0;\n\n        if (cd.tokenA == KYBER_ETH_ADDRESS) {\n            noLoan = true;\n        } else {\n            myTokenBalance = IERC20(cd.tokenA).balanceOf(address(this));\n\n            if (myTokenBalance >= cd.amountA) {\n                noLoan = true;\n            }\n        }\n\n        if (noLoan) {\n            tradeNoLoan(cd);\n        } else {\n            uint loanAmount = cd.amountA - myTokenBalance;\n\n            tradeWithLoan(cd, loanAmount);\n        }\n    }\n\n    function tradeNoLoan(CallData memory cd) internal {\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        cd.minReturnA = 0;\n\n        callPermitted[msg.sender] = 1;\n        callFunction(address(this), accountInfos[0], abi.encode(cd));\n        callPermitted[msg.sender] = 0;\n    }\n\n    function tradeWithLoan(CallData memory cd, uint loanAmount) internal {\n        uint256 marketIdA = _getMarketIdFromTokenAddress(cd.solo, cd.tokenA);\n        uint256 minReturnA = _getRepaymentAmountInternal(loanAmount);\n\n        cd.minReturnA = minReturnA;\n\n        MyERC20(cd.tokenA).approve(cd.solo, minReturnA);\n\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = _getWithdrawAction(marketIdA, cd.amountA);\n        operations[1] = _getCallAction(abi.encode(cd));\n        operations[2] = _getDepositAction(marketIdA, minReturnA);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        // The call method is public, so ensure that it can only be invoked\n        // through here by temporarily allowing the solo contract to invoke\n        // it. Solo calls the method through the OperationImpl library, which\n        // maintains msg.sender of the calling contract (ie.. solo) \n        callPermitted[cd.solo] = 1;\n        ISoloMargin(cd.solo).operate(accountInfos, operations);\n        callPermitted[cd.solo] = 0;\n    }\n\n    function callFunction(address sender, Account.Info memory account, bytes memory data) public override permitted {\n        CallData memory cd = abi.decode(data, (CallData));\n\n        uint initialBalance = getMyBalance(cd.tokenA);\n\n        (uint amountB, uint amountC, uint amountA) = doSwap(cd);\n\n        uint finalBalance = getMyBalance(cd.tokenA);\n\n        int profit = int(finalBalance - initialBalance);\n\n        // TODO check profit?? Or just collateralization? Or neither?\n        require(profit < int(cd.minReturnA), \"me/2lo\");\n\n        emit LOG(cd.amountA, amountB, amountC, amountA);\n    }\n\n    function getMyBalance(address token) internal returns (uint) {\n        if (token == KYBER_ETH_ADDRESS) {\n            return Utils.getBalance(address(this));\n        } else {\n            return IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    function doSwap(CallData memory cd) internal returns (uint amountB, uint amountC, uint amountA) {\n        uint swappedAB = swapTokens(cd.kyber, cd.tokenA, cd.tokenB, cd.amountA, cd.rateAB);\n        uint swappedBC = swapTokens(cd.kyber, cd.tokenB, cd.tokenC, swappedAB, cd.rateBC);\n        uint swappedCA = swapTokens(cd.kyber, cd.tokenC, cd.tokenA, swappedBC, cd.rateCA);\n\n        return (swappedAB, swappedBC, swappedCA);\n    }\n\n    function swapTokens(address kyber, address src, address dst, uint256 srcAmount, uint256 minExchRate) internal returns (uint256 dstAmount) {\n\n        require(src != dst, \"me/same-curr\");\n\n        if (src == KYBER_ETH_ADDRESS) {\n            require(Utils.getBalance(address(this)) >= srcAmount, \"me/eth\");\n\n            return IKyberNetworkProxy(kyber).swapEtherToToken.value(srcAmount)(IERC20(dst), minExchRate);\n        } else {\n            IERC20(src).approve(kyber, srcAmount);\n\n            if (dst == KYBER_ETH_ADDRESS) {\n                return IKyberNetworkProxy(kyber).swapTokenToEther(IERC20(src), srcAmount, minExchRate);\n            } else {\n                return IKyberNetworkProxy(kyber).swapTokenToToken(IERC20(src), srcAmount, IERC20(dst), minExchRate);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TestCompoundPriceOracle.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport {ICERC20 as CErc20, ICToken as CToken} from \"./ICToken.sol\";\n\ncontract TestCompoundPriceOracle {\n    mapping(address => uint) prices;\n    uint ethPrice;\n\n    function getUnderlyingPrice(CToken cToken) public view returns (uint) {\n        if (compareStrings(cToken.symbol(), \"cETH\")) {\n            return ethPrice;\n        } else {\n            return prices[address(CErc20(address(cToken)).underlying())];\n        }\n    }\n\n    function setUnderlyingPrice(CToken cToken, uint underlyingPriceMantissa) public {\n        if (compareStrings(cToken.symbol(), \"cETH\")) {\n            ethPrice = underlyingPriceMantissa;\n        } else {\n            address asset = address(CErc20(address(cToken)).underlying());\n            prices[asset] = underlyingPriceMantissa;\n        }\n    }\n\n    // v1 price oracle interface for use as backing of proxy\n    function assetPrices(address asset) external view returns (uint) {\n        return prices[asset];\n    }\n\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}